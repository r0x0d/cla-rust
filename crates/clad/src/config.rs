use serde::Deserialize;
use std::collections::HashMap;
use std::fs;
use std::path::Path;

/// Configuration for the proxy server
/// Loaded from config.toml file
#[derive(Clone, Debug, Deserialize)]
pub struct Config {
    /// Proxy server settings
    #[serde(default = "default_proxy")]
    pub proxy: ProxyConfig,
    /// Backend settings for communicating with the external API
    pub backend: BackendConfig,
}

/// Proxy server configuration
#[derive(Clone, Debug, Deserialize)]
pub struct ProxyConfig {
    /// Host to bind the server to (default: 127.0.0.1)
    #[serde(default = "default_host")]
    pub host: String,
    /// Port to bind the server to (default: 8080)
    #[serde(default = "default_port")]
    pub port: u16,
}

/// Backend API configuration
#[derive(Clone, Debug, Deserialize)]
pub struct BackendConfig {
    /// The endpoint points to an API server
    pub endpoint: String,
    /// HTTP request timeout in seconds (increase for CPU inference)
    #[serde(default = "default_timeout")]
    pub timeout: u64,
    /// Define https proxy to route the request through it
    pub proxies: Option<HashMap<String, String>>,
    /// Authentication settings
    pub auth: AuthConfig,
}

/// Authentication configuration
#[derive(Clone, Debug, Deserialize)]
pub struct AuthConfig {
    /// The path to the certificate file generated by RHSM
    pub cert_file: String,
    /// The path to the key file generated by RHSM
    pub key_file: String,
}

fn default_proxy() -> ProxyConfig {
    ProxyConfig {
        host: default_host(),
        port: default_port(),
    }
}

fn default_host() -> String {
    "127.0.0.1".to_string()
}

fn default_port() -> u16 {
    8080
}

fn default_timeout() -> u64 {
    30
}

impl Config {
    /// Load configuration from a TOML file
    pub fn from_file<P: AsRef<Path>>(path: P) -> Result<Self, Box<dyn std::error::Error>> {
        let contents = fs::read_to_string(path)?;
        let config: Config = toml::from_str(&contents)?;
        Ok(config)
    }
}
